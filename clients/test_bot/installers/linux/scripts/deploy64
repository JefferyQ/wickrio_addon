#!/bin/sh

# a second stage deploy script...
#
# Arguments to this script:
# $1 = build directory
# $2 = build number
# $3 = build extension string (i.e. alpha)
# $4 = build installation string (i.e. Alpha)
# $5 = release build flag (true for release)
# $6 = Output directory

set -e
current=`dirname $0`
cd $current

build_dir=$1
build_number=$2
build_extension=$3
install_extension=$4
release_flag=$5
output_dir="$6"

if test -z "$release_flag" ; then
	release_flag="false"; fi

#
# Make sure the version number is the correct length
#
check=${#build_number}
if [ $check -lt 8 ]; then
  build_number="0$build_number"
fi

#
# Debug display of input
#
echo build_dir=$build_dir
echo build_number=$build_number
echo build_extension=$build_extension
echo install_extension=$install_extension
echo release_flag=$release_flag

#
# Setup the version number(s)
#
maj=`echo $build_number | cut -c1-2 | sed 's/^0*//'`
min=`echo $build_number | cut -c3-4`
pat=`echo $build_number | cut -c5-6`
bld=`echo $build_number | cut -c7-8`

if [ "$release_flag" = "true" ]; then
    bldtype=""
    BldType=""
    version="${maj}.${min}.${pat}-${bld}"
    svcbldtype=""
    svcBldType=""
else
    bldtype="-${build_extension}"
    BldType=$install_extension
    version="${maj}.${min}.${pat}-${bld}~${build_extension}"
    svcbldtype="-debug"
    svcBldType="Debug"
fi


#
# More debug output
#
echo bldtype=$bldtype
echo BldType=$BldType
echo version=$version

prefix=~/tmp/wio_test_bot${bldtype}-deb
debian=~/tmp/wio_test_bot${bldtype}-deb/DEBIAN
bindir=$prefix/usr/bin
sbindir=$prefix/usr/sbin
libdir=$prefix/usr/lib/wio_test_bot${bldtype}
docdir=$prefix/usr/share/doc/wio_test_bot${bldtype}
plugins=$prefix/usr/lib/wio_test_bot${bldtype}/plugins

# Service related definitions
svcinitdir=$prefix/etc/init.d
systemdlibdir=$prefix/lib/systemd/system

optdir=$prefix/opt/WickrIO$svcBldType
scriptsdir=$optdir/scripts
imagedir=$optdir/attachments/image
dstintegrationsdir=$prefix/usr/lib/wickr/integrations
srcintegrationsdir=$current/../../../../../integrations

platform=$current/../../../../../platforms/linux/generic-64
sdkplatform=$current/../../../../../wickr-sdk/platforms/linux/generic-64

# Client definitions
menus=$prefix/usr/share/applications
pixmaps=$prefix/usr/share/pixmaps
messages=$prefix/usr/share/indicators/messages/applications
appdata=$prefix/usr/share/appdata

# Cleanup the target location (i.e. remove the target directory)
rm -rf $prefix

# Create the appropriate directories in the target location
mkdir -p $debian
mkdir -p $bindir
mkdir -p $sbindir
mkdir -p $docdir
mkdir -p $libdir
mkdir -p $optdir
mkdir -p $scriptsdir
mkdir -p $imagedir
#mkdir -p $crondir
mkdir -p $plugins/sqldrivers
mkdir -p $svcinitdir
mkdir -p $systemdlibdir
mkdir -p $dstintegrationsdir

# Client directories
mkdir -p $pixmaps
mkdir -p $menus
mkdir -p $appdata

#
# Copy the executables
#
cp -a ${build_dir}/clients/test_bot/client/test_bot$BldType $bindir

#
# TODO: Will need shared libraries
#
if [ "$release_flag" = "true" ]; then
  cp -a ${build_dir}/libs/QtWebApp/libQtWebApp.* $libdir
  cp -a ${build_dir}/libs/WickrIOLib/libWickrIOLib.* $libdir
  cp -a ${build_dir}/libs/WickrIOGUI/libWickrIOGUI.* $libdir
else
  cp -a ${build_dir}/libs/QtWebApp/libQtWebAppd.* $libdir
  cp -a ${build_dir}/libs/WickrIOLib/libWickrIOLibd.* $libdir
  cp -a ${build_dir}/libs/WickrIOGUI/libWickrIOGUId.* $libdir
fi

cp -a ${build_dir}/libs/SMTPEmail/libSMTPEmail.* $libdir
cp -a ${build_dir}/libs/qamqpsrc/libqamqp.* $libdir

#
# TODO: Are there any chrpath call needed to be done?
#

#
# Change the contents appropriately for Beta version Release versions
#
sed -e "s/EXTENSION/${bldtype}/g" -e "s/INSTALLEXT/${BldType}/g" -e "s/SVCEXTEN/${svcbldtype}/g" -e "s/VERSION/$version/" <$current/control64 > $debian/control

# Installer pre and post installation scripts
sed -e "s/EXTENSION/${svcbldtype}/g" -e "s/INSTALLEXT/${SvcBldType}/g" <$current/preinst > $debian/preinst
sed -e "s/EXTENSION/${svcbldtype}/g" -e "s/INSTALLEXT/${SvcBldType}/g" <$current/postinst > $debian/postinst
sed -e "s/EXTENSION/${svcbldtype}/g" -e "s/INSTALLEXT/${SvcBldType}/g" <$current/prerm > $debian/prerm

#
# Copy the integrations software
#
cp -a -r $srcintegrationsdir/software $dstintegrationsdir

#
# Copy the library files
#
cp -a $platform/*.so $platform/*.so.* $libdir/
if [ "$release_flag" = "true" ]; then
  cp -a $sdkplatform/release/*.so $sdkplatform/release/*.so.* $libdir/
else
  cp -a $sdkplatform/debug/*.so $sdkplatform/debug/*.so.* $libdir/
fi
rm -f $plugins/sqldrivers/*
#cp -a $current/../../../../../platforms/linux/plugins-64/* $plugins/sqldrivers/
#cp -a $current/../plugins-64/* $plugins/sqldrivers/
#cp -Lp /usr/lib/x86_64-linux-gnu/libicu*.so.52 $libdir/
mkdir -p $messages
echo "/usr/share/applications/wio_test_bot${bldtype}.client" >$messages/wio_test_bot${bldtype}

#
# Generate the MD5 SUM value
#
cd $prefix
find . -type f ! -regex '.*?debian-binary.*' ! -regex '.*?DEBIAN.*' -printf '%P ' | xargs md5sum > DEBIAN/md5sums

#
# Change the mode of the installed files
#
cd ~/tmp
chmod 0644 $debian/*
chmod -R g-w $prefix/usr
chmod -x $libdir/*.so*
chmod 755 $debian/preinst
chmod 755 $debian/postinst
chmod 755 $debian/prerm

#
# Create the actual package
#
rm -f wio_test_bot${bldtype}_*.deb
fakeroot chown -R root:root $prefix

fakeroot dpkg -b wio_test_bot${bldtype}-deb/ wio_test_bot${bldtype}_${version}_amd64.deb
sha256sum wio_test_bot${bldtype}_${version}_amd64.deb >wio_test_bot${bldtype}_${version}_amd64.sha256

if test -d "$output_dir" ; then
    cp wio_test_bot${bldtype}_${version}_amd64.* "$output_dir/"
    echo "copying wio_test_bot${bldtype}_${version}_amd64.* to $output_dir/"
fi
