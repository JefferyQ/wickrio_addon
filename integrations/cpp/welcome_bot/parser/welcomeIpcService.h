#ifndef WELCOMEIPCSERVICE_H
#define WELCOMEIPCSERVICE_H

#include <QObject>
#include <QThread>

#include "common/wickrNetworkUtil.h"

#include "nzmqt/nzmqt.hpp"

// Forward declaration
class WelcomeIpcThread;

///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////

// WickrIOJScript Thread State
enum JSThreadState { JS_UNINITIALIZED = 0, // Unitialized
                     JS_STARTED,           // Thread started state, enteres this state only on initial startup.
                     JS_PROCESSING,        // Currently processing messages
                     JS_FINISHED };        // Disconnected from switchboard

///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////

class WelcomeIpcService : public QObject
{
    Q_OBJECT
public:
    explicit WelcomeIpcService(QObject *parent = nullptr);
    ~WelcomeIpcService();

    // General purpose thread lock used for common threaded related queries/updates(hence ReadWrite).
    // NOTE: Other required service specific locks should be defined and managed by the specialized services.
    mutable QReadWriteLock m_lock;

    WickrServiceState   m_state;
    QThread             m_thread;
    WelcomeIpcThread    *m_cbThread=nullptr;

    void startThreads();
    void stopThreads();

    static QString jsServiceBaseName;

signals:
    void signalStateChange(bool shutdown);
    void signalStartIpcListening();

public slots:
};

///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////

class WelcomeIpcThread : public QObject
{
    Q_OBJECT
public:
    explicit WelcomeIpcThread(QThread *thread, WelcomeIpcService *ipcSvc, QObject *parent = nullptr);
    ~WelcomeIpcThread();

private:
    WelcomeIpcService   *m_parent;
    JSThreadState           m_state;

    // ZeroMQ definitions
    nzmqt::ZMQContext   *m_zctx = nullptr;
    nzmqt::ZMQSocket    *m_zsocket = nullptr;

signals:
    void signalStateChange(bool shutdown);

public slots:
    void slotStartIpcListening();
    void slotMessageReceived(const QList<QByteArray>&);
};



#endif // WELCOMEIPCSERVICE_H
