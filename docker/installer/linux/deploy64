#!/bin/sh

#
# This deploy script will install of the the WickrIO components for
# a docker installation of the WickrIO Bot
#

# a second stage deploy script...
#
# Arguments to this script:
# $1 = build directory
# $2 = build number
# $3 = build extension string (i.e. alpha)
# $4 = build installation string (i.e. Alpha)
# $5 = release build flag (true for release)
# $6 = Output directory

set -e
current=`dirname $0`
cd $current

build_dir=$1
build_number=$2
build_extension=$3
install_extension=$4
release_flag=$5
output_dir=$6

if test -z "$release_flag" ; then
	release_flag="false"; fi

if test -z "$output_dir" ; then
    output_dir="/dev/null" ; fi

#
# Make sure the version number is the correct length
#
check=${#build_number}
if [ $check -lt 8 ]; then
  build_number="0$build_number"
fi

#
# Debug display of input
#
echo build_dir=$build_dir
echo build_number=$build_number
echo build_extension=$build_extension
echo install_extension=$install_extension
echo release_flag=$release_flag

#
# Setup the version number(s)
#
maj=`echo $build_number | cut -c1-2 | sed 's/^0*//'`
min=`echo $build_number | cut -c3-4`
pat=`echo $build_number | cut -c5-6`
bld=`echo $build_number | cut -c7-8`

if [ "$release_flag" = "true" ]; then
    bldtype=""
    BldType=""
    version="${maj}.${min}.${pat}-${bld}"
    svcbldtype=""
    srcBldType=""
else
    bldtype="-${build_extension}"
    BldType=$install_extension
    version="${maj}.${min}.${pat}-${bld}~${build_extension}"
    svcbldtype="-debug"
    srcBldType=Debug
fi

#
# More debug output
#
echo bldtype=$bldtype
echo BldType=$BldType
echo version=$version

prefix=~/tmp/wio_docker${bldtype}-deb
debian=~/tmp/wio_docker${bldtype}-deb/DEBIAN
bindir=$prefix/usr/bin
libdir=$prefix/usr/lib/wio_docker${bldtype}
docdir=$prefix/usr/share/doc/wio_docker${bldtype}
plugins=$prefix/usr/lib/wio_docker${bldtype}/plugins
addonsdir=$prefix/usr/lib/wio_docker${bldtype}/node.addons

optdir=$prefix/opt/WickrIO$srcBldType

platform=$current/../../../platforms/linux/generic-64
sdkplatform=$current/../../../wickr-sdk/platforms/linux/generic-64


# Client definitions
menus=$prefix/usr/share/applications
pixmaps=$prefix/usr/share/pixmaps
messages=$prefix/usr/share/indicators/messages/applications
appdata=$prefix/usr/share/appdata

# Cleanup the target location (i.e. remove the target directory)
rm -rf $prefix

# Create the appropriate directories in the target location
mkdir -p $debian
mkdir -p $bindir
mkdir -p $docdir
mkdir -p $libdir
mkdir -p $addonsdir
mkdir -p $optdir
mkdir -p $plugins/sqldrivers

# Client directories
mkdir -p $pixmaps
mkdir -p $menus
mkdir -p $appdata

#
# Copy the executables
#
cp -a ${build_dir}/services/consolecmd/WickrIOConsoleCmd$srcBldType $bindir
cp -a ${build_dir}/services/clientserver_process/WickrIOSvr$srcBldType $bindir
cp -a ${build_dir}/clients/wickrio_bot/client/wickrio_bot$BldType $bindir
cp -a ${build_dir}/clients/core_bot/client/core_bot$BldType $bindir

if [ "$release_flag" = "true" ]; then
  cp -a ${build_dir}/libs/QtWebApp/libQtWebApp.* $libdir
  cp -a ${build_dir}/libs/WickrIOLib/libWickrIOLib.* $libdir
else
  cp -a ${build_dir}/libs/QtWebApp/libQtWebAppd.* $libdir
  cp -a ${build_dir}/libs/WickrIOLib/libWickrIOLibd.* $libdir
fi
cp -a ${build_dir}/libs/SMTPEmail/libSMTPEmail.* $libdir
cp -a ${build_dir}/libs/qamqpsrc/libqamqp.* $libdir

#
# Copy the node.js addon
#
cp ${current}/../../../clients/nodejs/addons/wickrio_node.js_addon/build/Release/wickrio_addon.node ${addonsdir}

#
# Run chrpath so binaries can find libraries
#
chrpath -r "/usr/local/wickr/Qt-5.9:/usr/local/wickr/Qt-5.9/lib:/usr/lib/wio_docker${bldtype}" $bindir/WickrIOConsoleCmd$srcBldType
chrpath -r "/usr/local/wickr/Qt-5.9/lib:/usr/lib/wio_docker${bldtype}" $bindir/WickrIOSvr$srcBldType
chrpath -r "/usr/local/wickr/Qt-5.9/lib:/usr/lib/wio_docker${bldtype}" $bindir/wickrio_bot$BldType
chrpath -r "/usr/local/wickr/Qt-5.9/lib:/usr/lib/wio_docker${bldtype}" $bindir/core_bot$BldType

#
# Change the contents appropriately for Beta version Release versions
#
sed -e "s/EXTENSION/${bldtype}/g" -e "s/INSTALLEXT/${BldType}/g" -e "s/SVCEXTEN/${svcbldtype}/g" -e "s/VERSION/$version/" <$current/control64 > $debian/control

# WickrIO Client Server settings file
sed -e "s/EXTENSION/${bldtype}/g" -e "s/INSTALLEXT/${BldType}/g" <$current/WickrIOSvr.ini > $optdir/WickrIOSvr$srcBldType.ini

#
# Copy the library files
#
cp -a $platform/*.so $platform/*.so.* $libdir/
if [ "$release_flag" = "true" ]; then
  cp -a $sdkplatform/release/*.so $sdkplatform/release/*.so.* $libdir/
else
  cp -a $sdkplatform/debug/*.so $sdkplatform/debug/*.so.* $libdir/
fi
rm -f $plugins/sqldrivers/*
mkdir -p $messages
echo "/usr/share/applications/wio_wickrio_bot${bldtype}.client" >$messages/wio_docker${bldtype}

#
# Generate the MD5 SUM value
#
cd $prefix
find . -type f ! -regex '.*?debian-binary.*' ! -regex '.*?DEBIAN.*' -printf '%P ' | xargs md5sum > DEBIAN/md5sums

#
# Change the mode of the installed files
#
cd ~/tmp
chmod 0644 $debian/*
chmod -R g-w $prefix/usr
chmod -x $libdir/*.so*
chmod 644 $optdir/WickrIOSvr$srcBldType.ini

#
# Create the actual package
#
rm -f wio_docker${bldtype}_*.deb
fakeroot chown -R root:root $prefix

fakeroot dpkg -b wio_docker${bldtype}-deb/ wio_docker${bldtype}_${version}_amd64.deb
sha256sum wio_docker${bldtype}_${version}_amd64.deb >wio_docker${bldtype}_${version}_amd64.sha256

if test -d "$output_dir" ; then
    echo "copying wio_docker${bldtype}_${version}_amd64.* to $output_dir/"
    cp wio_docker${bldtype}_${version}_amd64.* "$output_dir/" 
fi

